shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
annotation <- data.frame(
x = c(as.Date("2020-01-23"),as.Date("2020-01-26"),as.Date("2020-02-02"),as.Date("2020-04-08")),
y = c(1000, 3000,5000, 63000),
label = c("Wuhan Lockdown", "Travel Ban", "New Hosital complete", "Lockdown lifted")
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
covid19_world <- read.csv("covid19_worldmap_new.csv", stringsAsFactors = FALSE)
covid19_world$ObservationDate <- as.Date(covid19_world$ObservationDate, "%Y-%m-%d")
covid19_world <- read.csv("covid19_worldmap_new.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# install.packages("timevis")
install.packages("ggthemes")
runApp()
library(ggthemes)
install.packages("timevis")
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplotly)
# install.packages("timevis")
install.packages("ggplotly")
library(ggplotly)
# install.packages("timevis")
# install.packages("ggthemes")
install.packages("ggplotly")
# install.packages("timevis")
# install.packages("ggthemes")
install.packages("plotly")
library(plotly)
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
covid19_China <- read.csv("covid19_china_merged")
"covid19_china_merged")
covid19_China <- read.csv("covid19_china_merged")
covid19_China <- read.csv("covid19_china_merged.csv")
covid19_China <- read.csv("covid19_china_merged.csv")
View(covid19_China)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate >= input$daterange[1] &
ObservationDate <= input$daterange[2]) %>%
group_by(Province.State, ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate = as.Date("2020-04-20")) %>%
group_by(Province.State, ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == as.Date("2020-04-20")) %>%
group_by(Province.State, ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(Province.State, ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
covid19_world <- read.csv("covid19_worldmap_new.csv", stringsAsFactors = FALSE)
View(covid19_world)
covid19_China$ObservationDate <- as.Date(covid19_China$ObservationDate, "%Y-%m-%d")
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(Province.State, ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(ObservationDate) %>% filter(value == max(value)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(ObservationDate) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(value, .keep_all = TRUE)
View(countryvalue)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>% filter(Confirmed == max(Confirmed)) %>%
distinct(value, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(ObservationDate) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
covid19_China <- read.csv("covid19_china_merged.csv")
covid19_China$ObservationDate <- as.Date(covid19_China$ObservationDate, "%Y-%m-%d")
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(ObservationDate) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
is.na(covid19_China$Province.State)
count(is.na(covid19_China$Province.State))
which(is.na(covid19_China$Province.State))
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == as.Date("2020-04-20")) %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(covid19_world)
covid19_China$Province.State <- as.character(covid19_China$Province.State)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == as.Date("2020-04-20")) %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed))
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20")
covid19_China <- read.csv("covid19_china_merged.csv")
covid19_China$ObservationDate <- as.Date(covid19_China$ObservationDate, "%Y-%m-%d")
covid19_China <- read.csv("covid19_china_merged.csv")
covid19_China$ObservationDate <- as.Date(covid19_China$ObservationDate, "%m/%d/%Y")
# testing
#countryvalue <- covid19_world %>% filter (CountryName == "United States" | CountryName == "China") %>% group_by(CountryName, ObservationDate) %>% filter(value == max(value)) %>% distinct(value, .keep_all = TRUE)
#countryvalue2 <- covid19_world %>% filter(measurements == "Confirmed" & ObservationDate == "2020-02-02") %>% group_by(CountryName) %>% filter(value == max(value))
countryvalue <- covid19_China %>% filter(ObservationDate == "2020-04-20")
View(countryvalue)
runApp()
ggplot(China_filtered, aes(y = Confirmed, fill=Provinces.State))+
geom_bar(width = 1)+
coord_polar("y")
ggplot(countryvalue, aes(y = Confirmed, fill=Provinces.State))+
geom_bar(width = 1)+
coord_polar("y")
View(countryvalue)
ggplot(countryvalue, aes(y = Confirmed, fill=Province.State))+
geom_bar(width = 1)+
coord_polar("y")
ggplot(countryvalue, aes(x = Confirmed, fill=Province.State))+
geom_bar(width = 1)+
coord_polar("y")
ggplot(countryvalue, aes(y = Confirmed, fill=Province.State))+
geom_bar(width = 1)
ggplot(countryvalue, aes(y = Confirmed, fill=Province.State))+
geom_bar()
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar()
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar(stat = "identity")
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar(width = 1, stat = "identity")
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar(stat = "identity")
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar(stat = "identity") + coord_polar("y", start=0)
ggplot(countryvalue, aes(x = "", y = Confirmed, fill=Province.State))+
geom_bar(stat = "identity") + coord_polar("y", start=0) + theme(legend.position = "bottom")
runApp()
runApp()
runApp()
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-02-02") %>%
group_by(Province.State, ObservationDate) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(value, .keep_all = TRUE)
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-02-02") %>%
group_by(Province.State, ObservationDate) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-02-02") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
runApp()
runApp()
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-04-20") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-04-10") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
View(countryvalue)
countryvalue <- covid19_China %>% filter(ObservationDate >= "2020-01-22" &
ObservationDate <= "2020-03-10") %>%
group_by(Province.State) %>% filter(Confirmed == max(Confirmed)) %>%
distinct(Confirmed, .keep_all = TRUE)
runApp()
runApp()
runApp()
library(scales)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# load library
library(shiny)
library(leaflet)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(timevis)
library(plotly)
library(scales)
runApp()
runApp()
shiny::runApp()
runApp()
library(ggplotly)
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Alan Wang/Desktop/monash/test')
runApp('C:/Users/Alan Wang/Desktop/monash/test')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
install.packages(c("leaflet", "plotly", "shiny", "tidyverse"))
install.packages("timevis")
shiny::runApp()
